OpenCV code
#include <opencv2/opencv.hpp> 
#include <iostream> 
#include <string> 
#include <wiringPi.h>  // Arduino 통신을 위한 라이브러리 
#include <mysql/mysql.h>  // MySQL 라이브러리 
#include <fcntl.h>  // open() 함수 사용을 위한 헤더 
#include <termios.h>  // termios 구조체 사용을 위한 헤더 
#include <unistd.h>  // read() 함수 사용을 위한 헤더

using namespace cv;
using namespace std;

// MySQL 연결 설정
static const char* host = "localhost";
static const char* user = "root";
static const char* pass = "poly";
static const char* dbname = "project";

Rect roi(600, 250, 190, 400);  // ROI 영역

// 도형 개수 변수
int triangle_count = 0;
int rectangle_count = 0;
int circle_count = 0;
int error_count = 0;  // 오류 카운트

// 데이터베이스에 도형 데이터를 삽입하는 함수
void insertShapeData(MYSQL* conn) {
    char query[256];
    snprintf(query, sizeof(query),
        "INSERT INTO shape_data (id, triangle, rectangle, circle, error, time) VALUES (NULL, %d, %d, %d, %d, NOW())",
        triangle_count, rectangle_count, circle_count, error_count);

    if (mysql_query(conn, query)) {
        cerr << "Error: " << mysql_error(conn) << endl;
    }
    else {
        cout << "Shape data inserted successfully." << endl;
    }
}

// 도형 검출 함수
void detectShapes(const Mat& roi_frame, const Rect& roi, Mat& src_color) {

    // 도형 개수를 초기화
    triangle_count = 0;
    rectangle_count = 0;
    circle_count = 0;
    error_count = 0;

    Mat gray, blur, inv, img_erode, img_dilate, opening, edges, result;

    // 이미지를 흑백으로 변환하고 이진화
    cvtColor(roi_frame, gray, COLOR_BGR2GRAY);
    //imshow("gray", gray);

    GaussianBlur(gray, blur, Size(5, 5), 0);
    //imshow("blurred", blur);

    // 흑백 이미지를 이진화하여 배경과 도형을 분리
    threshold(blur, inv, 150, 255, THRESH_BINARY);
    //imshow("inv", inv);

    // Adaptive Thresholding 적용
    // adaptiveThreshold(gray, inv, 255, ADAPTIVE_THRESH_MEAN_C, THRESH_BINARY, 19, 2);
    // imshow("Adaptive Threshold", inv);

    // 연결 성분 분석을 통해 작은 잡음 제거
    Mat labels, stats, centroids;
    int numComponents = connectedComponentsWithStats(inv, labels, stats, centroids, 8, CV_32S);

    //erode(inv, img_erode, Mat::ones(Size(5, 5), CV_8UC1), Point(-1, -1));
    //dilate(img_erode, img_dilate, Mat::ones(Size(5, 5), CV_8UC1), Point(-1, -1));
    //erode(img_dilate, img_erode, Mat::ones(Size(5, 5), CV_8UC1), Point(-1, -1));
    //dilate(img_erode, img_dilate, Mat::ones(Size(5, 5), CV_8UC1), Point(-1, -1));
    //imshow("morph", img_dilate);

    morphologyEx(inv, opening, MORPH_OPEN, Mat());
    morphologyEx(opening, opening, MORPH_OPEN, Mat());
    morphologyEx(opening, opening, MORPH_OPEN, Mat());
    //imshow("opening", opening);

    for (int i = 1; i < numComponents; i++) {
        int area = stats.at<int>(i, CC_STAT_AREA);
        if (area < 200) {
            opening.setTo(0, labels == i);  // 잡음 제거
        }
    }
    //imshow("Noise Removed", inv);

    // 엣지 검출
    Canny(opening, edges, 100, 200);
    //imshow("edges", edges);

    // 컨투어 검출
    vector<vector<Point>> contours;
    vector<Vec4i> hierarchy;
    findContours(edges, contours, hierarchy, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);

    // 컨투어 개수 출력
    cout << "Contour Count: " << contours.size() << endl;

    // 원본을 컬러 이미지로 변환해 도형 이름을 표시
    cvtColor(gray, src_color, COLOR_GRAY2BGR);

    // shapes 배열의 크기를 contours.size()에 맞춰 동적으로 설정
    vector<int> shapes(contours.size());

    for (int i = 0; i < contours.size(); i++) {
        // 각 컨투어의 점 개수를 저장
        shapes[i] = contours[i].size();
        cout << i + 1 << "th Contour Point Count: " << shapes[i] << endl;

        /*// 도형 인식: 점 개수에 따라 이름 부여
        if (shapes[i] >= 2 && shapes[i] <= 4) {
            putText(src_color, name[0], contours[i][0], FONT_HERSHEY_SIMPLEX, 1, Scalar(0, 0, 255), 2);
        }
        else if (shapes[i] >= 5 && shapes[i] <= 8) {
            putText(src_color, name[1], contours[i][0], FONT_HERSHEY_SIMPLEX, 1, Scalar(0, 0, 255), 2);
        }
        else if (shapes[i] >= 200 && shapes[i] <= 220) {
            putText(src_color, name[2], contours[i][0], FONT_HERSHEY_SIMPLEX, 1, Scalar(0, 0, 255), 2);
        }
        else if (shapes[i] >= 250 && shapes[i] <= 260) {
            putText(src_color, name[3], contours[i][0], FONT_HERSHEY_SIMPLEX, 1, Scalar(0, 0, 255), 2);
        }*/
    }

    for (size_t i = 0; i < contours.size(); i++) {
        // 도형의 꼭짓점 수 계산
        vector<Point> approx;
        approxPolyDP(contours[i], approx, arcLength(contours[i], true) * 0.02, true);

        int vertexCount = approx.size();
        string shape = "unknown";

        if (vertexCount == 3) {
            shape = "triangle";
            triangle_count++;
        }
        else if (vertexCount == 4) {
            double aspectRatio = fabs(boundingRect(approx).width / (double)boundingRect(approx).height);
            shape = (aspectRatio >= 0.95 && aspectRatio <= 1.05) ? "square" : "rectangle";
            rectangle_count++;
        }
        else {
            double area = contourArea(contours[i]);
            double perimeter = arcLength(contours[i], true);
            double circularity = 4 * CV_PI * area / (perimeter * perimeter);
            if (circularity > 0.7) {
                shape = "circle";
                circle_count++;
            }
            else {
                error_count++;
            }
        }

        // 도형 이름을 컨투어 근처에 표시
        putText(src_color, shape, approx[1], FONT_HERSHEY_SIMPLEX, 1, Scalar(0, 0, 255), 2);
        drawContours(src_color, contours, (int)i, Scalar(255, 255, 0), 3);
    }

    //resize(src_color, src_color, Size(1000, 1000), 0, 0, INTER_CUBIC);
    //namedWindow("Result");
    //hconcat(gray, blur, inv, img_dilate, edges, src_color, result);

    //imshow("result", src_color);  // 결과 화면 출력
    //waitKey(0);

    /*// 컨투어를 다양한 색으로 그리기
    for (int i = 0; i < contours.size(); i++) {
        Scalar color = Scalar(rand() % 256, rand() % 256, rand() % 256);
        drawContours(src_color, contours, i, color, 3);
    }

    // 결과 출력
    imshow("result", src_color);
    waitKey(0); // 결과를 볼 수 있도록 일시 정지*/
}

int main() {
    // USB 카메라 초기화
    VideoCapture cap(0); // 0번 카메라 사용
    if (!cap.isOpened()) {
        cerr << "Error: Could not open camera." << endl;
        return -1;
    }

    // Bluetooth 설정
    int fd;
    struct termios options;
    char buffer[256];

    fd = open("/dev/rfcomm0", O_RDWR | O_NOCTTY | O_NDELAY);
    if (fd == -1) {
        perror("Unable to open /dev/rfcomm0");
        return -1;
    }

    tcgetattr(fd, &options);
    cfsetispeed(&options, B9600);
    cfsetospeed(&options, B9600);
    options.c_cflag |= (CLOCAL | CREAD);
    options.c_cflag &= ~PARENB;
    options.c_cflag &= ~CSTOPB;
    options.c_cflag &= ~CSIZE;
    options.c_cflag |= CS8;
    tcsetattr(fd, TCSANOW, &options);

    cout << "Waiting for command from Arduino..." << endl;

    Mat detection_result;  // 검출 결과를 오른쪽 화면에 표시하기 위한 Mat 변수

    while (true) {
        Mat frame, roi_frame;
        cap >> frame; // 현재 프레임 캡처
        if (frame.empty()) {
            cerr << "Error: Could not grab frame." << endl;
            continue;
        }

        // ROI 영역 추출 및 표시
        roi_frame = frame(roi); // ROI 영역만 가져오기
        rectangle(frame, roi, Scalar(0, 0, 0), 2);
        imshow("Live", frame);

        // Bluetooth 메시지 수신
        int n = read(fd, buffer, sizeof(buffer) - 1);
        if (n > 0) {
            buffer[n] = '\0'; // 버퍼 끝에 NULL 추가
            buffer[strcspn(buffer, "\r\n")] = '\0'; // 개행 문자 제거

            cout << "Received: " << buffer << " (length: " << n << ")" << endl;

            // 수신된 문자열이 'stop'인지 확인
            if (strcmp(buffer, "stop") == 0) {
                detectShapes(roi_frame, roi, detection_result); // 도형 검출 및 결과 이미지 생성

                // MySQL 연결 후 데이터 삽입
                // 하나 이상의 도형이 감지된 경우에만 데이터베이스에 삽입
                if (triangle_count > 0 || rectangle_count > 0 || circle_count > 0 || error_count > 0) {
                    MYSQL* conn = mysql_init(0);
                    if (conn && mysql_real_connect(conn, host, user, pass, dbname, 3306, NULL, 0)) {
                        insertShapeData(conn); // 도형 데이터 삽입
                        mysql_close(conn);
                    }
                    else {
                        cerr << "MySQL connection error: " << mysql_error(conn) << endl;
                    }
                }
            }
        }

        // 빈 검출 결과 이미지 생성
        if (detection_result.empty()) {
            detection_result = Mat::zeros(roi_frame.size(), roi_frame.type());
        }

        // 좌우 화면 결합하여 Dual Monitoring
        Mat dual_view;
        resize(roi_frame, roi_frame, Size(1000, 1000), 0, 0, INTER_CUBIC);
        resize(detection_result, detection_result, Size(1000, 1000), 0, 0, INTER_CUBIC);
        hconcat(roi_frame, detection_result, dual_view);
        imshow("Dual Monitoring", dual_view);

        if (waitKey(30) == 'q') break;
    }

    //리소스 해제
    cap.release();
    close(fd);
    return 0;
}
