Arduino code
#include <SoftwareSerial.h>

#define TRIG 5  // 초음파 송신 핀
#define ECHO 4  // 초음파 수신 핀
int motor = 11;
int intSw = 0;
long duration, distance; // 초음파 거리 측정 변수
SoftwareSerial BTSerial(2, 3);
String lastState = ""; // 마지막 상태 변수 추가


void setup() {
  Serial.begin(9600);  // 시리얼 통신 초기화
  BTSerial.begin(9600);
  pinMode(TRIG, OUTPUT);
  pinMode(ECHO, INPUT);
  pinMode(motor, OUTPUT);
}


void loop() {
  // 초음파 센서로 거리 측정
  digitalWrite(TRIG, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG, LOW);


  duration = pulseIn(ECHO, HIGH); // 초음파 신호를 받는 데 걸리는 시간
  distance = duration * 17 / 1000; // 거리 계산


  // 초음파 센서 거리 출력
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");


  // 거리가 10cm 이하일 때 모터를 멈추고, 3초 후 다시 동작
  if ((distance >= 20 && distance <= 40) &&intSw != '2') {  // 모터가 멈춘 상태가 아니라면 멈춤
    intSw = '2';  // 모터 정지
    analogWrite(motor, 0);  // 모터를 멈춤
    delay(1000);
    Serial.println("Object detected, stopping motor...");
    if (lastState != "stop") { // 이전 상태와 비교
      BTSerial.println("stop");  // 블루투스로 'stop' 메시지 전송
      lastState = "stop"; // 마지막 상태 업데이트
    }
    delay(5000);  // 5초 대기
   
    // 모터를 1초 동안 최대 속도로 동작
    analogWrite(motor, 255);  // 최대 속도로 모터 동작
    Serial.println("Motor at maximum speed for 1 second...");
    delay(1000);  // 1초 대기


   


    intSw = '1';  // 다시 모터가 동작하도록 설정
    Serial.println("Resuming motor...");
    if (lastState != "go") { // 이전 상태와 비교
      BTSerial.println("go");  // 블루투스로 'go' 메시지 전송
      lastState = "go"; // 마지막 상태 업데이트
    }
  }


  // 시리얼 입력이 있을 경우 해당 입력을 받음
  if (Serial.available()) {
    intSw = Serial.read();
  }


  // 모터 동작 설정
  if (intSw == '1') {
    analogWrite(motor, 255);  // 최대 속도
  } else if (intSw == '2') {
    analogWrite(motor, 0);    // 멈춤
  }


  // 모터 상태에 따른 블루투스 메시지 전송
  if (intSw == '1') {
    if (lastState != "go") { // 이전 상태와 비교
      BTSerial.println("go");  // 모터가 동작 중일 때 'go' 메시지
      lastState = "go"; // 마지막 상태 업데이트
    }
  } else if (intSw == '2') {
    if (lastState != "stop") { // 이전 상태와 비교
      BTSerial.println("stop");  // 모터가 멈춘 상태일 때 'stop' 메시지
      lastState = "stop"; // 마지막 상태 업데이트
    }
  }
  delay(100);
}
